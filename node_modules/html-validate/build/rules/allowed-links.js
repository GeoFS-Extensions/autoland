"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dom_1 = require("../dom");
const rule_1 = require("../rule");
const defaults = {
    allowExternal: true,
    allowRelative: true,
    allowAbsolute: true,
    allowBase: true,
};
const mapping = {
    a: "href",
    img: "src",
    link: "href",
    script: "src",
};
const description = {
    ["external" /* EXTERNAL */]: "External links are not allowed by current configuration.",
    ["relative-base" /* RELATIVE_BASE */]: "Links relative to <base> are not allowed by current configuration.",
    ["relative-path" /* RELATIVE_PATH */]: "Relative links are not allowed by current configuration.",
    ["absolute" /* ABSOLUTE */]: "Absolute links are not allowed by current configuration.",
    ["anchor" /* ANCHOR */]: undefined,
};
class AllowedLinks extends rule_1.Rule {
    constructor(options) {
        super(Object.assign({}, defaults, options));
    }
    documentation(context) {
        const message = description[context] ||
            "This link type is not allowed by current configuration";
        return {
            description: message,
            url: rule_1.ruleDocumentationUrl(__filename),
        };
    }
    setup() {
        this.on("attr", (event) => {
            if (!this.isRelevant(event)) {
                return;
            }
            const link = event.value.toString();
            const style = this.getStyle(link);
            switch (style) {
                case "anchor" /* ANCHOR */:
                    /* anchor links are always allowed by this rule */
                    break;
                case "absolute" /* ABSOLUTE */:
                    this.handleAbsolute(event, style);
                    break;
                case "external" /* EXTERNAL */:
                    this.handleExternal(event, style);
                    break;
                case "relative-base" /* RELATIVE_BASE */:
                    this.handleRelativeBase(event, style);
                    break;
                case "relative-path" /* RELATIVE_PATH */:
                    this.handleRelativePath(event, style);
                    break;
            }
        });
    }
    isRelevant(event) {
        const { target, key, value } = event;
        /* don't check links with dynamic values */
        if (value instanceof dom_1.DynamicValue) {
            return false;
        }
        const attr = mapping[target.tagName];
        return attr && attr === key;
    }
    getStyle(value) {
        /* http://example.net or //example.net */
        if (value.match(/^([a-z]+:)?\/\//g)) {
            return "external" /* EXTERNAL */;
        }
        switch (value[0]) {
            /* /foo/bar */
            case "/":
                return "absolute" /* ABSOLUTE */;
            /* ../foo/bar */
            case ".":
                return "relative-path" /* RELATIVE_PATH */;
            /* #foo */
            case "#":
                return "anchor" /* ANCHOR */;
            /* foo/bar */
            default:
                return "relative-base" /* RELATIVE_BASE */;
        }
    }
    handleAbsolute(event, style) {
        const { allowAbsolute } = this.options;
        if (!allowAbsolute) {
            this.report(event.target, "Link destination must not be absolute url", event.valueLocation, style);
        }
    }
    handleExternal(event, style) {
        const { allowExternal } = this.options;
        if (!allowExternal) {
            this.report(event.target, "Link destination must not be external url", event.valueLocation, style);
        }
    }
    handleRelativePath(event, style) {
        const { allowRelative } = this.options;
        if (!allowRelative) {
            this.report(event.target, "Link destination must not be relative url", event.valueLocation, style);
        }
    }
    handleRelativeBase(event, style) {
        const { allowRelative, allowBase } = this.options;
        if (!allowRelative) {
            this.report(event.target, "Link destination must not be relative url", event.valueLocation, style);
        }
        else if (!allowBase) {
            this.report(event.target, "Relative links must be relative to current folder", event.valueLocation, style);
        }
    }
}
exports.default = AllowedLinks;
